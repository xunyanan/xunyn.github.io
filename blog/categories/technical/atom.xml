<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technical | 寻亚楠的博客]]></title>
  <link href="http://xunyanan.com/blog/categories/technical/atom.xml" rel="self"/>
  <link href="http://xunyanan.com/"/>
  <updated>2016-03-10T15:44:27+08:00</updated>
  <id>http://xunyanan.com/</id>
  <author>
    <name><![CDATA[寻亚楠]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS进阶面试题]]></title>
    <link href="http://xunyanan.com/blog/2013/12/10/iosjin-jie-mian-shi-ti/"/>
    <updated>2013-12-10T21:05:00+08:00</updated>
    <id>http://xunyanan.com/blog/2013/12/10/iosjin-jie-mian-shi-ti</id>
    <content type="html"><![CDATA[<p><a href="http://www.onevcat.com">OneV‘s Den</a>在博客里出了10道iOS面试题，用他的话是:&ldquo;列出了十个应聘Leader级别的高级Cocoa/CocoaTouch开发工程师所应该掌握和理解的技术&rdquo; 。
在这里給一份我的答案。<br/>
</br>1. 你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？<br/>
Objecitve-C的重要特性是Runtime（运行时）,在#import &lt;objc/runtime.h> 下能看到相关的方法，用过objc_getClass()和class_copyMethodList()获取过私有API;使用<br/>
<code>objective-c
Method method1 = class_getInstanceMethod(cls, sel1);
Method method2 = class_getInstanceMethod(cls, sel2);
method_exchangeImplementations(method1, method2);  
</code><br/>
代码交换两个方法，在写unit test时使用到。<br/>
</br>2. 你实现过多线程的Core Data么？NSPersistentStoreCoordinator，NSManagedObjectContext和NSManagedObject中的哪些需要在线程中创建或者传递？你是用什么样的策略来实现的？<br/>
没实现过多线程的CoreData(待实践)</p>

<!--more-->


<p>
</br>3. Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）<br/>
UI框架的底层有CoreAnimation，CoreAnimation的底层有CoreGraphics.</p>

<table>
<thead>
<tr>
<th>UIKit             </th>
</tr>
</thead>
<tbody>
<tr>
<td> Core Animation   | </td>
</tr>
<tr>
<td> Core Graphics    | </td>
</tr>
<tr>
<td> Graphics Hardware|   </td>
</tr>
</tbody>
</table>


<p>使用CA做过menu菜单的展开收起（太逊了）<br/>
</br>4. 是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。<br/>
CoreText可以解决复杂文字内容排版问题。CoreImage可以处理图片，为其添加各种效果。体验是很强大，挺复杂的。<br/>
</br>5.NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了…) <br/>
NSNotification是通知模式在iOS的实现，KVO的全称是键值观察(Key-value observing),其是基于KVC（key-value coding）的，KVC是一个通过属性名访问属性变量的机制。例如将Module层的变化，通知到多个Controller对象时，可以使用NSNotification；如果是只需要观察某个对象的某个属性，可以使用KVO。
对于委托模式，在设计模式中是对象适配器模式，其是delegate是指向某个对象的，这是一对一的关系，而在通知模式中，往往是一对多的关系。委托模式，从技术上可以现在改变delegate指向的对象，但不建议这样做，会让人迷惑，如果一个delegate对象不断改变，指向不同的对象。      <br/>
</br>6. 你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。<br/>
使用NSOperationQueue用来管理子类化的NSOperation对象，控制其线程并发数目。GCD和NSOperation都可以实现对线程的管理，区别是 NSOperation和NSOperationQueue是多线程的面向对象抽象。项目中使用NSOperation的优点是NSOperation是对线程的高度抽象，在项目中使用它，会使项目的程序结构更好，子类化NSOperation的设计思路，是具有面向对象的优点（复用、封装），使得实现是多线程支持，而接口简单，建议在复杂项目中使用。
项目中使用GCD的优点是GCD本身非常简单、易用，对于不复杂的多线程操作，会节省代码量，而Block参数的使用，会是代码更为易读，建议在简单项目中使用。
<a href="http://blog.csdn.net/xunyn/article/details/14525243">详细的答案见该文</a><br/>
</br>7. 既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？<br/>
使用block是要注意，若将block做函数参数时，需要把它放到最后，GCD是Grand Central Dispatch，是一个对线程开源类库，而Block是闭包，是能够读取其他函数内部变量的函数。<a href="http://blog.csdn.net/xunyn/article/details/11658261">详细的答案见该文</a>。在MRC中__block id x, 块中的x的内存技术是不会改变的。在ARC中，__block id x;默认会retain x，这样会更容易出现循环引用的情况，可在x变量加修饰符__weak(iOS 5.0以上)或__unsafe_unretained(iOS 5.0以下)。<br/>
</br>8. 您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？<br/>
使用NSOperation发送异步网络请求，使用NSOperationQueue管理线程数目及优先级，底层是用NSURLConnetion，详细可见开源框架<a href="https://github.com/xunyn/LWConnetionDemo">LWConnetion</a>。<br/>
</br>9. 对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？<br/>
最大的优点是它的运行时特性，不足是没有命名空间，对于命名冲突，可以使用长命名法或特殊前缀解决，如果是引入的第三方库之间的命名冲突，可以使用link命令及flag解决冲突。<br/>
</br>10. 你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。<br/>
抽象和封装，方便使用。首先是对问题有充分的了解，比如构建一个文件解压压缩框架，从使用者的角度出发，只需关注发送给框架一个解压请求，框架完成复杂文件的解压操作，并且在适当的时候通知给是哦难过者，如解压完成、解压出错等。在框架内部去构建对象的关系，通过抽象让其更为健壮、便于更改。其次是API的说明文档。</p>

<p>这些问题，多数是没有统一的正确答案的，问题有深度，又是在平时工作会用到的，非常适合大家一起讨论，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac上安装Rails]]></title>
    <link href="http://xunyanan.com/blog/2013/12/01/install-rails-on-mac/"/>
    <updated>2013-12-01T00:16:00+08:00</updated>
    <id>http://xunyanan.com/blog/2013/12/01/install-rails-on-mac</id>
    <content type="html"><![CDATA[<p><a href="http://rubyonrails.org">rails</a>是一套基于<a href="https://www.ruby-lang.org/zh_cn/">ruby</a>的web开发框架。下面是在mac上安装<a href="http://rubyonrails.org">rails</a>的过程。</p>

<h2>环境</h2>

<p>Mac pro (OS X 10.9)</p>

<h2>安装清单</h2>

<p><em><a href="https://developer.apple.com/xcode/">Xcode</a>(苹果开发IDE，需要其中的command line工具)<br/>
</em><a href="https://www.ruby-lang.org/zh_cn/">ruby</a>(开发语言环境)  <br/>
<em><a href="http://brew.sh">Homebrew</a>(包管理环境，安装你需要但苹果不需要的东西)<br/>
</em><a href="https://rvm.io">RVM</a>(ruby版本管理，可以让你在不同的ruby版本下切换)<br/>
*<a href="http://rubyonrails.org">rails</a>(开发框架)</p>

<!--MORE -->


<p></p>

<h2>步骤</h2>

<h3>首先将Xocde安装上</h3>

<p>在终端中输入<br/>
<code>
gcc -v
</code><br/>
终端返回gcc版本则说明command line已经安装，若没有则可用命令<br/>
<code>
 xcode-select --install
</code><br/>
安装。</p>

<h3>安装git(mac已预装)</h3>

<p><code>
git --version
</code></p>

<h3>安装ruby</h3>

<p>在终端输入(mac已预装)<br/>
<code>
ruby -v
</code><br/>
返回ruby版本，则说明mac已预装ruby环境，没有则可去官网安装。</p>

<h3>安装homebrew</h3>

<p><code>
ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
</code>
安装完后，检查版本<br/>
<code>
brew -v
</code></p>

<h3>安装rvm</h3>

<p><code>
 \curl -L https://get.rvm.io | bash -s stable
</code><br/>
安装完成后，检查版本<br/>
<code>
rvm -v
</code><br/>
多个ruby版本切换<br/>
<code>
rvm install 1.9.3  
rvm use 1.9.3  
rvm --default 1.9.3
</code></p>

<h3>安装Rails</h3>

<p><code>
sudo gem install rails -V
</code><br/>
因为国内万恶的墙的问题，原本应该很顺畅的这一步，在国内就会突然恰到某个包的下载，然后就一直不动了。解决方法是，使用<a href="http://ruby.taobao.org">淘宝的镜像安装</a>(业界良心)<br/>
<code>
gem sources --remove https://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
</code><br/>
用这个安装完成，便可查看rails版本<br/>
<code>
rails -v
</code><br/>
创建一个测试工程，检查环境是否安好
<code>
rails new hello --skip-bundle  
</code>
加上&mdash;skip-bundle还是墙的原因，然后我们要在新建的项目中，手动的为它安装bundle。<br/>
新建项目之后再安装bundle,进入到项目中，打开Gemfile,修改第一行：source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>'修改为：source '<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>'<br/>
<code>
gem install bundle  
</code><br/>
使用cd命令进入hello文件夹，尝试启动rails的server服务，看是否正常。<br/>
<code>
rails server
</code><br/>
如果报错：
<code>
Could not find gem 'sdoc (&gt;= 0) ruby' in the gems available on this machine.  
Run `bundle install` to install missing gems.  
</code><br/>
继续使用命令<br/>
<code>
bundle install  
</code></p>

<p>至此，继续使用rails server命令，如果看到<br/>
<code>
=&gt; Booting WEBrick
=&gt; Rails 4.0.1 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
[2013-12-01 01:09:34] INFO  WEBrick 1.3.1
[2013-12-01 01:09:34] INFO  ruby 2.0.0 (2013-06-27) [universal.x86_64-darwin13]
[2013-12-01 01:09:34] INFO  WEBrick::HTTPServer#start: pid=1130 port=3000
</code><br/>
说明启动成功，至此，已安装好rails的环境，步数较多，需要耐心，如果出现权限问题的提示，就在相应的命令前加sudo，来提高权限即可。</p>

<h2>Q&amp;A</h2>

<h3>停止rails服务（我的Mac电脑使用ctrl+c 停止后，进程依然在）</h3>

<ol>
<li>找到占用tcp 3000端口的进程<br/>
<code>
$ lsof -wni tcp:3000
</code></li>
<li>杀掉进程<br/>
<code>
$ kill -9 PID
</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制做自己的马赛克微信头像]]></title>
    <link href="http://xunyanan.com/blog/2013/11/26/mosaic-photo-and-share-moment/"/>
    <updated>2013-11-26T22:49:00+08:00</updated>
    <id>http://xunyanan.com/blog/2013/11/26/mosaic-photo-and-share-moment</id>
    <content type="html"><![CDATA[<h2>想法</h2>

<p>2013年接近尾声了，有的媒体会用马赛克的方式，把一年中的大事件汇集到一张图片上。印象中天才少年<a href="http://www.matrix67.com/">Matrix67</a>曾使用<a href="http://zh.wikipedia.org/zh-cn/Mathematica">Mathematica</a>制作过自己马赛克头像，于是便有了用微信朋友圈里的图片来制作一个自己的微信头像。<br/>
<img src="http://xunyanan.com/images/blog/mosaic_me_2011.jpg" alt="马赛克头像" /><br/>
觉得不像我，可以离开座位，退后一点，离显示器远点看这张图片。</p>

<!--more-->


<p></p>

<h2>动手</h2>

<p>使用到的工具：<br/>
<em>Mac(os x 10.9)电脑(windows也可以做，替换相应的工具即可)<br/>
</em><a href="http://www.wolfram.com/mathematica/">Mathematica 9.0</a><br/>
<em><a href="http://www.google.cn/intl/zh-CN/chrome/">Chrome</a> and <a href="https://chrome.google.com/webstore/detail/bulk-download-imageszig/gfjhimhkjmipphnaminnnnjpnlneeplk">batch image download</a><br/>
</em>Preview and <a href="http://ifunapple.com/2013/07/a-better-finder-rename-9/">A better finder rename</a></p>

<h3>筹集素材</h3>

<p>制作马赛克头像的第一步是什么？要有足够的马赛克（心中无码可跳过），脑子的想法便是微信朋友的头像，有足够的好友数量，便有很多素材，这些素材，还是有统一尺寸的。要获得这些素材，有几个方法。</p>

<h4>从手机中获得素材</h4>

<p>从手机将微信App导出，从中找到头像文件夹。这是第一想法，没试成，用的iPhone手机，升了iOS7.0，越不了狱，看不到微信的文件夹。android的童鞋可以试下，但有可能腾讯没把素材按JPEG放到文件，可能放到SQLite里，这样的话，这个方法就用不了了。</p>

<h4>从微信网站下载素材</h4>

<p><a href="https://wx.qq.com">微信新推出了网页版</a>，可以做的事情就多了一些。<a href="(https://wx.qq.com">打开微信网页版后</a>),用手机扫描二维码登陆后，可以看到微信网页版的聊天界面，看到朋友们的信息。在这里我走个小弯路（点击跳过此段内容），这个弯路是用<a href="http://www.w3school.com.cn/js/">Javascript</a>和<a href="http://nodejs.org/">nodejs</a>来完成从网站扒朋友头像的任务。</p>

<h5>JS获得头像url代码</h5>

<p><code>js
function a () {var a = document.images; for(i=0;i&lt;a.length;i++){ if(a[i].getAttribute("hide_src")){console.log(a[i].getAttribute("hide_src"))} } } a();
</code></p>

<h5>使用nodejs的request下载素材到本地文件</h5>

<p>```js
// Dependencies
var fs = require(&lsquo;fs&rsquo;);
var url = require(&lsquo;url&rsquo;);
var http = require(&lsquo;http&rsquo;);
var exec = require(&lsquo;child_process&rsquo;).exec;
var spawn = require(&lsquo;child_process&rsquo;).spawn;
// App variables
var file_url = &lsquo;<a href="http://xunyanan.com/images/blog/PowerOfNow.png">http://xunyanan.com/images/blog/PowerOfNow.png</a>&rsquo;;
var DOWNLOAD_DIR = &lsquo;./&rsquo;;
// We will be downloading the files to a directory, so make sure it&rsquo;s there
// This step is not required if you have manually created the directory
var mkdir = &lsquo;mkdir -p &rsquo; + DOWNLOAD_DIR;
var child = exec(mkdir, function(err, stdout, stderr) {</p>

<pre><code>if (err) throw err; 
else download_file_httpget(file_url); 
</code></pre>

<p>});<br/>
// Function to download file using HTTP.get
var download_file_httpget = function(file_url) {
var options = {</p>

<pre><code>host: url.parse(file_url).host, 
port: 80, 
path: url.parse(file_url).pathname 
</code></pre>

<p>};
var file_name = url.parse(file_url).pathname.split(&lsquo;/&rsquo;).pop();
var file = fs.createWriteStream(DOWNLOAD_DIR + file_name);
http.get(options, function(res) {</p>

<pre><code>console.log(res.statusCode);
     console.log(res.data);
res.on('data', function(data) { 
        file.write(data); 
    }).on('end', function() { 
        file.end(); 
        console.log(file_name + ' downloaded to ' + DOWNLOAD_DIR); 
    }); 
}); 
</code></pre>

<p>};
```</p>

<h5>一切准备妥当，发现微信的链接是https的，直接用url是新建http连接是获得不了东西的。这就和泡好了方便面，发现没配叉子一样。就换了条其他的路，放代码出来，大家可以研究下，如何用脚本建立上https的请求，毕竟脚本的方法能控制更多东西。</h5>

<h4>新的道路，使用<a href="http://www.google.cn/intl/zh-CN/chrome/">Chrome</a> and <a href="https://chrome.google.com/webstore/detail/bulk-download-imageszig/gfjhimhkjmipphnaminnnnjpnlneeplk">batch image download</a>插件</h4>

<p>如果去年抢过火车票，那估计电脑里都还有Chrome，<a href="https://chrome.google.com/webstore/detail/bulk-download-imageszig/gfjhimhkjmipphnaminnnnjpnlneeplk">batch image download</a>比较好用，安装完成后便在右键菜单中可以看到。就是要注意，要先把朋友列表拖动一下，让所有的朋友头像都在网页上刷新出来，这样才可以下载全部的。</p>

<h3>整理素材</h3>

<p>现在有了几百张朋友的头像，Mathematica需要的是统一尺寸的正方形jpg图像，大概每张图片的像素在20*20~~40*40之间,要先整理一下图片。</p>

<h4>首先删除不是正方形的图像</h4>

<p>里面会有群组的头像，这个也可以选择删掉</p>

<h4>重命名整理图片（可跳过）</h4>

<ol>
<li>使用shell 命令批量重名<br/>
<code>
j=100;for i in *;do let j+=1;mv "$i" "${i%.*}$j.jpg";done
</code></li>
<li>使用<a href="http://ifunapple.com/2013/07/a-better-finder-rename-9/">A better finder rename</a></li>
</ol>


<h4>将132*132的头像图片像素变小</h4>

<p>推荐使用Mac自带的<a href="http://zh.wikipedia.org/zh-cn/Automator">atuomator</a>做这项任务，通过鼠标拖动，就能安排这个小机器人给你干活，是见很有意思的事情。对于<a href="http://www.macx.cn/thread-2030978-1-1.html">自定义缩放图像</a>这里有一份详细的教程。<br/>
在脑海中先好要让机器人做什么，比如第一步先把图片拷贝到每个目录，然后在把这些图像尺寸缩小。编辑好flow后，保存好后，便可以通过右键看到自己命名的操作，然后选中文件操作。用完之后，如果不想右键点击后，还出现自定义的操作，可以在automator删除services工作流，进到目录[username]/Library/Services下删除对应名字的workflow，就可以了。</p>

<h4>制作黑白素材</h4>

<p>将所有的头像图片，制作一份黑白素材，放在一起组成新的图像库。从Mathematica生成马赛克图片的上说，素材图库中图片越多，然后有黑白色图片低对比度图片，生成出来的头像，会效果更好。每一个素材库的图片都会是当一个像素去对应到最终生成的头像图片上。制作黑白素材的方法有三种方法：<br/>
1. automator小机器人可以做<br/>
2. 使用priview调节饱和度(Saturation)<br/>
3. 使用photoshop调节颜色通道
效果上从上到下越来越好，功夫上也是从上到下越费越多。建议第二种。</p>

<h3>制作图片</h3>

<p>制作马赛克图片我们用的是<a href="http://www.wolfram.com/mathematica/">Mathematica 9.0</a> (<a href="http://www.bjt.name/2011/06/mosaic-plot-with-r/">用R语言的看这里</a>)。先看看下这经典的三行代码，向<a href="http://blog.wolfram.com/2008/05/02/%0Amaking-photo-mosaics/">Theodore Gray</a>致敬。<br/>
<code>  
imagePool = Map[With[{i = Import[#]}, {i, N@Mean[Flatten[ImageData[i], 1]]}] &amp;,
   FileNames["/Users/xunyanan/Desktop/webwx_img/*.jpg"]];
closeMatch[c_] :=
 RandomChoice[Nearest[imagePool[[All, 2]] -&gt; imagePool[[All, 1]], c, 20]]
ImageAssemble[
 Map[closeMatch,
  ImageData[Import["/Users/xunyanan/Desktop/2011me.tiff"]], {2}]]
</code><br/>
第一行就是把建立了一个制定路径的图像库;第二行写了个匹配函数，函数的内容是找出最接近的20个图片，并随机选择;第三行是导入目标图片，并调用函数closeMatch生成图像结果。</p>

<h4>目标图片tiff格式的头像照片</h4>

<p>找一张自己的头像图片，然后把它处理成20*20像素的tiff格式(<strong>注意在保存tiff格式时，一定不要勾选Alpha通道</strong>)。如果选择像素大于20的图片，生成时间会长一些。</p>

<h4>生成马赛克头像</h4>

<p>在<a href="http://www.wolfram.com/mathematica/">Mathematica 9.0</a> 新建note book，然后，将三行代码拷入其中，并把路径改成自己的文件位置。右键选择Evaluation cell，便可看到结果。</p>

<h2>分享到微信朋友圈</h2>

<p>可以用<a href="http://open.weixin.qq.com/intro/">微信的开放平台</a>把自己的头像分享回微信。我的<a href="http://xunyanan.com/blog/2013/11/16/build-octopress-blog/">个人博客网站</a>用的的是加网分享，点击分享，扫描二维码即可完成。</p>

<h3>在个人博客网站添加加网的方法是</h3>

<h4>注册加网后，获得加网生成的js</h4>

<p>```html</p>

<!-- JiaThis Button BEGIN -->


<script type="text/javascript">
var jiathis_config = {data_track_clickback:'true'};
</script>


<script type="text/javascript" src="[your url]" charset="utf-8"></script>


<p><!-- JiaThis Button END —>
```
将此段代码添加到个人网站中，<a href="http://xunyanan.com/blog/2013/11/16/build-octopress-blog/">详见这篇</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建octopress博客]]></title>
    <link href="http://xunyanan.com/blog/2013/11/16/build-octopress-blog/"/>
    <updated>2013-11-16T15:24:00+08:00</updated>
    <id>http://xunyanan.com/blog/2013/11/16/build-octopress-blog</id>
    <content type="html"><![CDATA[<p>惯例，第一篇献给<a href="http://octopress.org/">octopress</a>,并感谢github创始人<a href="http://tom.preston-werner.com/">Tom Preston Werner</a>，没有他<a href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html">放弃30W美元的年薪</a>，便不会有github。</p>

<p>看到这篇文章，你已经访问到我的<a href="http://xunyanan.com">octopress博客</a>了（这不是废话么），如果有想法也创建一个独立的个人博客，可以参看我创建博客的一些经验。</p>

<p>我是站在巨人的肩头上完成<a href="http://xunyanan.com">博客</a>创建的,有:</p>

<p><em><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">阮一峰的搭建一个免费的，无限流量的Blog&mdash;&mdash;github Pages和Jekyll入门</a><br/>
</em><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧的象写程序一样写博客：搭建基于github的博客</a><br/>
*<a href="http://biaobiaoqi.me/blog/2013/03/21/building-octopress-in-github-mac/">biaobiaoqi的在github上
搭建octopress博客 Mac版</a></p>

<p>首先，你要有一台可以上网的电脑,（又是废话，正用着呢，<a href="http://www.comp-on.org">点这发现自己的幸运</a>）。然后了解你的电脑，要知道操作系统版本等(最好有用一种语言写过代码的经历)，博主用的是Mac电脑，windows和linux的同学不建议参考本文。</p>

<p>网上有很有搭环境的博文，但建议看<a href="http://octopress.org/docs/setup/">官网的步骤</a>，因为Octopress一直在更新，很多网上的博文都是旧版本的搭建步骤，耽误事。</p>

<!-- more -->


<h1>搭建环境</h1>

<h2>工欲善其事，必先利其器:</h2>

<ol>
<li>Github（官网下载，后面新建项目用）
下载地址：<a href="https://help.github.com/articles/set-up-git">https://help.github.com/articles/set-up-git</a></li>
<li>iTerm2（可替代mac终端的，比较强大）
下载地址：<a href="http://www.iterm2.com/#/section/home">http://www.iterm2.com/#/section/home</a></li>
<li>ruby 安装包 （下载 ruby-1.9.3-p362.tar.gz 这个）
下载地址：<a href="http://ruby.taobao.org/mirrors/ruby/">http://ruby.taobao.org/mirrors/ruby/</a></li>
<li>Mou （Markdown编辑软件，这个强，可用于后期发布博客文章）
下载地址：<a href="http://mouapp.com/">http://mouapp.com/</a></li>
<li>Xcode（它将帮你安装好 Unix 环境需要的开发包）
下载地址：官网或百度吧，比较大⋯⋯</li>
</ol>


<p>让子弹飞一会，这些都是后面要用到的工具软件，先去下载,不要安装。<br/>
这时候，忽略一个问题，就是每个人的Mac电脑是不一样的，最大的不同是操作系统版本，我的OS系统是Version 10.9，巨人们的写博客时，还没有出呢，可能你的Mac是更新的电脑，所以要想好如何check这些。</p>

<h2>想想我们要做什么</h2>

<p>看官网的步骤之前，需要有点大致的概念，这样能帮助更快的理解。</p>

<p>1 假设我们需要自己搭建一个独立博客网站，需要什么？首先要有台连接到英特网服务器，要有前端的页面，要后端的数据库，要有域名等。
2 github可以提供给我们的是，github一个免费的代码托管仓库，它支持用户html页面的显示，也就是用户可以上传HTML文件，然后在远程像访问网页一样访问它。
3 按照我们的设想1，我们这时候还缺网站的后台，数据库这些，github并不提供这些，数据库的作用是提高管理能力，对于个人博客这种数据规模很小，便可返璞归真，用回静态页面。
<code>
对于计算机和一切能被用来改造这个世界的事物的使用都不应受到任何限制，
任何试图隐藏系统的复杂性的行为都只会得到一个更为复杂的系统。
</code>
4 静态页面用起来很复杂，我们需要Octopress这样的引擎来帮我们干“重活”，我们可以关注于自己博客中的内容，用过HTML的都知道，内容需要写<html></html>的标记，我们要把这些工作也简化，便有了Markdown，我们使用Markdown来描述我们的内容，然后由引擎“翻译”为HTML页面。</p>

<h2>现在需要什么环境</h2>

<ol>
<li>既然要托管到github，那么便要有github的环境.
check本机的git环境，在命令行输入
<code>
git --version
</code></li>
<li>Octopress是基于Jekyll的，需要ruby的环境编译。
check ruby
<code>
ruby -v
</code>
ruby的version 1.9.3以上，新版的Mac，这些都是有装的。</li>
<li>gcc和make，ruby的环境需要gcc，这个我们通过安装xcode的command line tool来完成安装
check gcc
<code>
gcc -v
</code></li>
</ol>


<h2>跟着官方文档设置Octopress</h2>

<p>Setup Octopress
<code>
git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code>
Next, install dependencies.
<code>
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code>
Install the default Octopress theme.
<code>
rake install
</code></p>

<h2>建立username.github.io的gibhub page</h2>

<p>看到这里，你应该在啃官方的文档，这个很重要，需要继续啃，里面的步骤我就不再翻译了。</p>

<p>这需要花费一些时间，因为全是新知识，不要怕放弃。</p>

<p>继续努力，直到在浏览器中，输入username.github.io，可以看到自己的页面</p>

<h1>个性化定制</h1>

<p>看到了自己的页面，是不是很兴奋，先别开香槟，接着还有任务。</p>

<h2>git相关的命令</h2>

<p>git是一个Linux开发的版本控制工具，它svn不同的是，它是分布式的，可以不用常联server。对于学习git，推荐的还是<a href="http://gitref.org">官方文档</a>,（<a href="http://gitbook.liuhui998.com/7_3.html">中文版</a>）。
还记得，安装Octopress的第一步操作么？<br/>
<code>
git clone git://github.com/imathis/octopress.git octopress
</code>
我们从github克隆了一份octopress的代码到本地。这时候相当于在本地有了一份octopess的代码库，使用
<code>
git remote -v
</code>
会看到远程代码仓库的配置信息
<code>
origin  git://github.com/imathis/octopress.git (fetch)
origin  git://github.com/imathis/octopress.git (push)
</code>
下面是一张我的octopress文件夹里的内容<br/>
<img src="http://xunyn.github.io/images/blog/OctopressCatogery.png" alt="OctopressCatogery" /><br/>
其中sass和source，这是我们博客的源代码文件目录。<br/>
我们需要把源代码也上传到github上，这样便可以多台机写博客了。<br/>
_deploy是通过octopress生成的静态页面的博客文件夹，我们可以看到它的里面也有.git的文件。<br/>
cd进到该目录，使用git remote -v查看
<code>
origin  http://github.com/xunyn/xunyn.github.io (fetch)
origin  http://github.com/xunyn/xunyn.github.io (push)
</code>
它会在我们使用rake deploy时自动push到我们的路径下。这时候我们不需要在自已去push。但是博客源代码是需要我们自己push到github的server的.</p>

<h4>使用多台电脑的同时写博客</h4>

<p>需要先拿把source code拿下来
<code>
git pull origin source
</code>
然后在更改了source后，check in更新，将本地source update github的代码仓库上
<code>
git add .
git commit -m 'your message'
git push origin source
</code></p>

<h2>个性化设置自己的博客</h2>

<p>个性化设置这块，参考了<a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">biaobiaoqi的定制Octopress</a>,
<em>安装第三方主题
<code>
$ cd octopress$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash$ rake install['slash’]
</code>
</em>添加评论
Disqus
```</p>

<h1>Disqus Comments</h1>

<p>disqus_short_name:xunyngithubio
disqus_show_comment_count:false
```</p>

<p>*添加分享
注册加网后，从加网获得模板
在post下创建jiathis.html
将加网的模板，拷贝到jiathis.html
在_config.xml创建新的标记</p>

<p>```</p>

<h1>share</h1>

<p>jiathis_share: ture</p>

<p>```</p>

<p>在source/_includes/post/sharing.html添加下面的代码。<br/>
```<br/>
#使用是去掉反斜杠掉反斜杠</p>

<pre><code>\{\% if site.jiathis_share \%\}
\{\% include post/jiathis.html \%\}
\{\% endif \%\}
</code></pre>

<p>```</p>

<h1>Q&amp;A</h1>

<p>1.Xcode 5 command line 未安装解决方法
<code>
xuns-MacBook-Pro:~ xunyanan$ xcode-select --install
xcode-select: note: install requested for command line developer tools
xuns-MacBook-Pro:~ xunyanan$
</code>
2.无权限问题解决方法
使用sudo
sudo gem install bundler
sudo bundle install</p>

<p>3.bundle install安装成功的log,这个需要网络访问，要等较长时间。
<code>
xuns-MacBook-Pro:octopress1 xunyanan$ sudo bundle install
Password:
Fetching gem metadata from https://rubygems.org/.......
Fetching gem metadata from https://rubygems.org/..
Using rake (0.9.2.2)
Using RedCloth (4.2.9)
Using chunky_png (1.2.5)
Using fast-stemmer (1.0.1)
Using classifier (1.3.3)
Using fssm (0.2.9)
Using sass (3.2.9)
Using compass (0.12.2)
Installing directory_watcher (1.4.1)
Installing haml (3.1.7)
Installing kramdown (0.13.8)
Installing liquid (2.3.0)
Installing syntax (1.0.0)
Installing maruku (0.6.1)
Installing posix-spawn (0.3.6)
Installing yajl-ruby (1.1.0)
Installing pygments.rb (0.3.4)
Installing jekyll (0.12.0)
Installing rack (1.5.2)
Installing rack-protection (1.5.0)
Installing rb-fsevent (0.9.1)
Installing rdiscount (2.0.7.3)
Installing rubypants (0.2.0)
Installing sass-globbing (1.0.0)
Installing tilt (1.3.7)
Installing sinatra (1.4.2)
Installing stringex (1.4.0)
Using bundler (1.3.5)
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
</code>
出现绿色的两行，说明安装成功。<br/>
4.git clone some branch
<code>
git clone git://github.com/xunyn/xunyn.github.io -b 'source' temp
</code>
remember  brach name use ‘'</p>

<p>5.rake preview的使用
我的Mac机开启preview功能时，使用Chrome访问<a href="http://localhost:4000">localhost:4000</a>可以正常预览,使用Safari不行，具体原因还不知道。其次，preview支持页面改动预览，也就是可以边写边看效果，但开启preview功能前，一定要确保浏览器为占用4000的端口，否则会无法使用preview功能，好的方法是预览完，随手关闭页面。</p>
]]></content>
  </entry>
  
</feed>
